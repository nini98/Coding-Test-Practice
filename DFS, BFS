#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>

using namespace std;

void dfs(int start, vector<int> graph[], bool check[]){
    stack<int> s;
    int i, next, current;
    s.push(start);
    check[start] = true;

    printf("%d ", start);
    while(!s.empty()){
        current = s.top();
        s.pop();

        for(i = 0; i<graph[current].size(); i++){

            next = graph[current][i];

            if(check[next] == false){
                printf("%d ", next);
                check[next] = true;
                s.push(current);
                s.push(next);
                break;
            }

        }
    }
}

void bfs(int start, vector <int> graph[], bool check[]){
    queue <int> q;
    int i, tmp;
    check[start] = true;
    q.push(start);

    while(!q.empty()){
        tmp = q.front();
        q.pop();
        printf("%d ", tmp);
        for(i = 0; i<graph[tmp].size(); i++){

            if(check[graph[tmp][i]] == false){
                q.push(graph[tmp][i]);
                check[graph[tmp][i]] = true;

            }
        }
    }

}


int main()
{
    int N,M,start, i, u , v;
    scanf("%d %d %d", &N, &M, &start);
    vector <int> graph[N+1];
    bool check[N+1];
    bool check2[N+1];

    fill(check, check+N+1, false);

    for(i = 0; i<M; i++){
        scanf("%d %d", &u, &v);
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    for(i = 1; i<= N; i++)
        sort(graph[i].begin(), graph[i].end());

    dfs(start, graph, check);
    printf("\n");
    bfs(start, graph, check2);
    return 0;
}
