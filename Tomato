#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <queue>
#define MAX 1000

using namespace std;

int graph[MAX][MAX];
int cnt_graph[MAX][MAX];
int dx[4] = {0, -1, 0, 1};
int dy[4] = {-1, 0, 1, 0};
queue <pair<int, int> > start_point;

void bfs(queue <pair<int, int> > start, int N, int M){
    int i, next_x, next_y, x, y, biggest = 0;
    int s = start.size();
    queue <pair<int, int> > q;

    for(i = 0; i<s; i++){
        q.push(start.front());

        cnt_graph[start.front().first][start.front().second] = 0;
        start.pop();
    }

    while(!q.empty()){
        x = q.front().first;
        y = q.front().second;
        q.pop();

        for(i = 0; i<4; i++){
            next_x = x+dx[i];
            next_y = y+dy[i];

            if(graph[next_x][next_y] != -1 && cnt_graph[next_x][next_y] == -1 && next_x >= 0 && next_x < N && next_y >= 0 && next_y < M){
                q.push(make_pair(next_x, next_y));
                cnt_graph[next_x][next_y] = cnt_graph[x][y]+1;
                if(biggest < cnt_graph[x][y]+1)
                    biggest = cnt_graph[x][y]+1;
            }
        }
    }
    printf("%d\n", biggest);
}

int main()
{
    int M, N, i, j, s = 0;
    scanf("%d %d", &M, &N);

    for(i = 0;i < N; i++){
        for(j = 0; j<M; j++)
            scanf("%d", &graph[i][j]);
    }
    memset(cnt_graph, -1, sizeof(cnt_graph));

    for(i = 0;i < N; i++){
        for(j = 0; j<M; j++){
            if(graph[i][j] == 1){
                start_point.push(make_pair(i,j));
            }
        }
    }
    bfs(start_point, N, M);

    return 0;
}
